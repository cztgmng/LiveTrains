@using LiveTrains.Services

<div class="train-details-box">
    @if (TrainDetails != null)
    {
        <div class="train-details-header">
            <img src="@GetCarrierIconUrl(TrainDetails.Type)" alt="@TrainDetails.Carrier" class="carrier-logo" />
            <div class="train-title">
                <h3>@TrainDetails.Type @TrainDetails.Number</h3>
                @if (!string.IsNullOrEmpty(TrainDetails.RouteName))
                {
                    <h4>@TrainDetails.RouteName</h4>
                }
            </div>
            <button class="close-button" @onclick="OnClose">×</button>
        </div>
        <div class="train-details-content">
            <div class="route-info">
                <div class="station start-station">
                    <div class="station-dot start-dot"></div>
                    <div class="station-details">
                        <div class="station-name">@TrainDetails.StartStationName</div>
                        @if (!string.IsNullOrEmpty(TrainDetails.StartTime))
                        {
                            <div class="station-time">
                                <span class="time">@TrainDetails.StartTime</span>
                                @if (TrainDetails.StartDelay > 0)
                                {
                                    <span class="delay">+@TrainDetails.StartDelay.ToString("F1") min</span>
                                }
                            </div>
                        }
                    </div>
                </div>
                
                @* Route middle section with smooth expansion *@
                <div class="route-middle">
                    <div class="route-line-top"></div>
                    
                    @* Show expand button only if there are intermediate stations *@
                    @if (TrainDetails.Stations.Count > 2)
                    {
                        <button class="route-expand-button" @onclick="ToggleRouteExpanded">
                            <span class="route-expand-text">
                                @if (routeExpanded)
                                {
                                    <span>Hide Route</span>
                                }
                                else
                                {
                                    <span>@(TrainDetails.Stations.Count - 2) stops</span>
                                }
                            </span>
                            <span class="route-expand-icon @(routeExpanded ? "expanded" : "collapsed")">▼</span>
                        </button>
                    }
                    
                    @* Smooth expansion container for route stations *@
                    <div class="route-expansion-container @(routeExpanded ? "" : "collapsed")">
                        @if (TrainDetails.Stations.Count > 2)
                        {
                            @for (int i = 1; i < TrainDetails.Stations.Count - 1; i++)
                            {
                                var station = TrainDetails.Stations[i];
                                
                                <div class="inline-route-station">
                                    <div class="inline-station-line">
                                        <div class="inline-station-dot"></div>
                                        <div class="inline-connection-line"></div>
                                    </div>
                                    <div class="inline-station-info">
                                        <div class="inline-station-name">@station.Name</div>
                                        
                                        @if (!string.IsNullOrEmpty(station.Platform))
                                        {
                                            <div class="inline-station-platform">Platform @station.Platform</div>
                                        }
                                        
                                        <div class="inline-station-times">
                                            @if (!string.IsNullOrEmpty(station.ScheduledArrival))
                                            {
                                                <div class="inline-time-row">
                                                    <span class="inline-time-label">Arr:</span>
                                                    <span class="inline-time-value">
                                                        @station.ScheduledArrival
                                                        @if (station.ArrivalDelay > 0)
                                                        {
                                                            <span class="inline-delay">+@station.ArrivalDelay.ToString("F1")min</span>
                                                        }
                                                    </span>
                                                </div>
                                            }
                                            
                                            @if (!string.IsNullOrEmpty(station.ScheduledDeparture))
                                            {
                                                <div class="inline-time-row">
                                                    <span class="inline-time-label">Dep:</span>
                                                    <span class="inline-time-value">
                                                        @station.ScheduledDeparture
                                                        @if (station.DepartureDelay > 0)
                                                        {
                                                            <span class="inline-delay">+@station.DepartureDelay.ToString("F1")min</span>
                                                        }
                                                    </span>
                                                </div>
                                            }
                                        </div>

                                        @* Show additional information if available *@
                                        @if (station.Messages.Any() || station.Notices.Any() || station.Warnings.Any())
                                        {
                                            <div class="inline-station-alerts">
                                                @foreach (var message in station.Messages)
                                                {
                                                    <div class="inline-alert inline-message">ℹ️ @message</div>
                                                }
                                                @foreach (var notice in station.Notices)
                                                {
                                                    <div class="inline-alert inline-notice">📋 @notice</div>
                                                }
                                                @foreach (var warning in station.Warnings)
                                                {
                                                    <div class="inline-alert inline-warning">⚠️ @warning</div>
                                                }
                                            </div>
                                        }
                                    </div>
                                </div>
                            }
                        }
                    </div>
                    
                    <div class="route-line-bottom"></div>
                </div>
                
                <div class="station end-station">
                    <div class="station-dot end-dot"></div>
                    <div class="station-details">
                        <div class="station-name">@TrainDetails.EndStationName</div>
                        @if (!string.IsNullOrEmpty(TrainDetails.EndTime))
                        {
                            <div class="station-time">
                                <span class="time">@TrainDetails.EndTime</span>
                                @if (TrainDetails.EndDelay > 0)
                                {
                                    <span class="delay">+@TrainDetails.EndDelay.ToString("F1") min</span>
                                }
                            </div>
                        }
                    </div>
                </div>
            </div>

            <div class="train-details-info">
                <div class="info-row">
                    <span class="info-label">Carrier:</span>
                    <span class="info-value">@TrainDetails.Carrier</span>
                </div>
                @if (!string.IsNullOrEmpty(TrainDetails.RouteNumber))
                {
                    <div class="info-row">
                        <span class="info-label">Route number:</span>
                        <span class="info-value">@TrainDetails.RouteNumber</span>
                    </div>
                }
                @if (TrainDetails.Stations.Count > 0)
                {
                    <div class="info-row">
                        <span class="info-label">Stations:</span>
                        <span class="info-value">@TrainDetails.Stations.Count stops</span>
                    </div>
                }
                @* Add total journey time *@
                @if (GetTotalJourneyTime() != null)
                {
                    <div class="info-row">
                        <span class="info-label">Journey time:</span>
                        <span class="info-value">@GetTotalJourneyTime()</span>
                    </div>
                }
                @if (!string.IsNullOrEmpty(TrainDetails.TrackingUrl))
                {
                    <div class="info-row link-row">
                        <a href="@TrainDetails.TrackingUrl" target="_blank" class="tracking-link">
                            View on Portal Pasażera <span class="external-icon">↗</span>
                        </a>
                    </div>
                }
            </div>
            
            @* Show overall delay status if any delays exist *@
            @if (TrainDetails.StartDelay > 0 || TrainDetails.EndDelay > 0 || TrainDetails.Stations.Any(s => s.ArrivalDelay > 0 || s.DepartureDelay > 0))
            {
                <div class="delay-summary">
                    <div class="delay-header">⚠️ Delays Detected</div>
                    @if (TrainDetails.StartDelay > 0)
                    {
                        <div class="delay-item">Start: +@TrainDetails.StartDelay.ToString("F1") min</div>
                    }
                    @if (TrainDetails.EndDelay > 0)
                    {
                        <div class="delay-item">End: +@TrainDetails.EndDelay.ToString("F1") min</div>
                    }
                </div>
            }
        </div>
    }
    else
    {
        <div class="train-details-loading">
            <p>Loading train details...</p>
        </div>
    }
</div>

@code {
    [Parameter]
    public TrainDetails? TrainDetails { get; set; }

    [Parameter]
    public EventCallback OnClose { get; set; }

    private bool routeExpanded = false;

    private void ToggleRouteExpanded()
    {
        routeExpanded = !routeExpanded;
    }

    private string? GetTotalJourneyTime()
    {
        if (TrainDetails == null || string.IsNullOrEmpty(TrainDetails.StartTime) || string.IsNullOrEmpty(TrainDetails.EndTime))
            return null;

        try
        {
            // Parse time strings (format: HH:mm)
            if (TimeSpan.TryParse(TrainDetails.StartTime, out var startTime) && 
                TimeSpan.TryParse(TrainDetails.EndTime, out var endTime))
            {
                var duration = endTime - startTime;
                
                // Handle overnight journeys
                if (duration.TotalMinutes < 0)
                {
                    duration = duration.Add(TimeSpan.FromDays(1));
                }
                
                var hours = (int)duration.TotalHours;
                var minutes = duration.Minutes;
                
                if (hours > 0)
                {
                    return $"{hours}h {minutes}m";
                }
                else
                {
                    return $"{minutes}m";
                }
            }
        }
        catch (Exception)
        {
            // If parsing fails, return null
        }
        
        return null;
    }

    private string GetCarrierIconUrl(string carrier)
    {
        return carrier switch
        {
            "IC" => "https://encrypted-tbn2.gstatic.com/images?q=tbn:ANd9GcTudaL7viYZdPkjE6I_ae3dROs1ZARywfz1ISyvzNNxKMg7B0l1XxTOiCb5R93_",
            "PR" => "https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcShBZqpAHnRCy4-XJFYOpT1FB7Z9Hi3AMbR8Dogpsnj5lG4NH1tndbWIVAJsxYO",
            "KW" => "https://encrypted-tbn2.gstatic.com/images?q=tbn:ANd9GcSx1jf6nxAv6vG8Eh8GMeG6M4QVvs-sd_oqEW9gtggssgWzkHFrrm4_lq6vEjB9",
            "AR" => "https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcTV5nvINCi-sHP3nq4DfyqnlCPvMWMoWScdUMgq3rf3Sqt1S9pTy2dY31zqILcJ",
            "KS" => "https://encrypted-tbn1.gstatic.com/images?q=tbn:ANd9GcT812gFd2fScPbg1H8WTcLSSdPLr9lfUpW3CfGb3Q24v-rwiqCK3gHvTyGZi28_",
            "KD" => "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTSWEd1ADcEp8OZEuCBKqCP5RrO3ofo6YMASk1qUMNkLvTi59oOPR6myIBVeIlw",
            "KM" => "https://encrypted-tbn2.gstatic.com/images?q=tbn:ANd9GcSpnufJ7waXBOck26ADz0COZAuDGD13FnNYYj5gVIdegrdv_FgJiDiyL1eJN9_x",
            "SKM" => "https://encrypted-tbn1.gstatic.com/images?q=tbn:ANd9GcRv1Cf4wQJ3iw5a0amylbxcWOyhsH4nRQ00QgSmiLxgifYYUFOjsvHhwWvmp1db",
            "SKMT" => "https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcT4tnUGPLmH0JGcxnChJETsYDw5nIj8Wcol00Jdl-T5qTTpHSEPPiT3FWRuxNdu",
            "ŁKA" => "https://encrypted-tbn1.gstatic.com/images?q=tbn:ANd9GcSVlWBUS9YeV2_oQsB3-ldmOtT_DIFZAlxeCAGObCN_vaU4bbjBkwXGhBKk-4Fq",
            "KMŁ" => "https://encrypted-tbn1.gstatic.com/images?q=tbn:ANd9GcT99eNcqKKiJqnTQrn4hn00T-K7JXeKHClCJ6AcQVIzJIr_Zb3BQzjS-FuM0ydw",
            _ => "https://encrypted-tbn1.gstatic.com/images?q=tbn:ANd9GcQp-ezcvUBGtNJzT3TLjHmPtvKRiCvurkCNlzWhxNiFaQHk9YQAQ8ZBIl_NX16d"
        };
    }
}
