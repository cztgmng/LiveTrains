@page "/map"
@inject IJSRuntime JSRuntime
@inject LiveTrainTrackingService TrainTrackingService
@implements IAsyncDisposable
@using LiveTrains.Services
@using LiveTrains.Components
@using System.Collections.Generic

@* Move train details container above the map *@
@if (currentTrainDetails != null)
{
    <div class="train-details-container">
        <TrainDetailsBox TrainDetails="currentTrainDetails" OnClose="ClearTrainDetails" />
    </div>
}

<div class="map-container" id="mapId">
    <!-- GPS Filter Toggle Button -->
    <div class="map-controls">
        <button class="btn btn-toggle @(gpsFilterEnabled ? "btn-toggle-on" : "btn-toggle-off")" 
                @onclick="ToggleGpsFilter"
                title="@(gpsFilterEnabled ? "Showing GPS-enabled trains and non-GPS trains" : "Showing all trains (non-GPS preferred when duplicates exist)")">
            <i class="@(gpsFilterEnabled ? "fas fa-satellite-dish" : "fas fa-train")"></i>
            @(gpsFilterEnabled ? "GPS Mode" : "All Trains")
        </button>
    </div>
    
    <!-- GPS Status Indicator -->
    @if (trainPositions.Any())
    {
        <div class="gps-status">
            @{
                var gpsTrains = trainPositions.Count(t => t.HasGps);
                var totalTrains = trainPositions.Count;
                var trainsWithSpeed = trainPositions.Count(t => t.AverageSpeedKmh > 0);
            }
            Trains: @totalTrains | GPS: @gpsTrains (@((gpsTrains * 100.0 / totalTrains).ToString("F0"))%) | Speed: @trainsWithSpeed
        </div>
    }
</div>

@code {
    private IJSObjectReference? _module;
    private DotNetObjectReference<Map>? _objectReference;
    private List<TrainPosition> trainPositions = new();
    private bool gpsFilterEnabled = false; // GPS filter state

    [Parameter]
    public double Latitude { get; set; } = 51.505;

    [Parameter]
    public double Longitude { get; set; } = -0.09;

    [Parameter]
    public int ZoomLevel { get; set; } = 13;

    [Parameter]
    public List<TrainPosition> TrainPositions { get; set; } = new();

    // Store the last drawn track
    private List<(double lat, double lng)>? currentTrack;
    
    // Store the currently selected train details
    private TrainDetails? currentTrainDetails;
    
    // Store the currently selected train for highlighting
    private string? selectedTrainNumber;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                // Ensure we dispose any existing reference
                _objectReference?.Dispose();
                
                // Create new DotNetObjectReference
                _objectReference = DotNetObjectReference.Create(this);
                
                Console.WriteLine("DotNetObjectReference created successfully");
                
                // Initialize the map
                await InitializeMapAsync();
                
                // Give the map a moment to initialize before updating markers
                await Task.Delay(500);
                
                // Update markers if we have positions
                if (trainPositions.Count > 0)
                {
                    await UpdateTrainMarkersOnMap();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error in OnAfterRenderAsync: {ex.Message}");
            }
        }
    }

    protected override void OnInitialized()
    {
        try
        {
            TrainTrackingService.OnTrainPositionsUpdated += async positions =>
            {
                try
                {
                    trainPositions = positions ?? new List<TrainPosition>();
                    await InvokeAsync(StateHasChanged);
                    
                    // Only update markers if we have a valid object reference
                    if (_objectReference != null)
                    {
                        await InvokeAsync(UpdateTrainMarkersOnMap);
                    }
                    
                    // Pre-warm cache for visible trains in the background
                    if (positions?.Count > 0)
                    {
                        var visibleTrainNumbers = positions.Take(10).Select(p => p.Number).ToList();
                        _ = Task.Run(async () => 
                        {
                            try
                            {
                                await TrainTrackingService.PreWarmCacheForVisibleTrains(visibleTrainNumbers);
                            }
                            catch (Exception ex)
                            {
                                Console.WriteLine($"Error pre-warming cache: {ex.Message}");
                            }
                        });
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error handling train positions update: {ex.Message}");
                }
            };
            
            TrainTrackingService.StartAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in OnInitialized: {ex.Message}");
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        // Update train markers on the map
        if (TrainPositions != null && TrainPositions.Count > 0)
        {
            await JSRuntime.InvokeVoidAsync("leafletInterop.updateTrainMarkers", TrainPositions);
        }
    }

    // Add this method to handle train marker clicks
    [JSInvokable]
    public async Task OnTrainMarkerClicked(string trainNumber)
    {
        if (string.IsNullOrEmpty(trainNumber))
        {
            Console.WriteLine("OnTrainMarkerClicked: Invalid train number");
            return;
        }

        Console.WriteLine($"Train clicked: {trainNumber}");
        selectedTrainNumber = trainNumber;
        
        // Use cancellation token to prevent hanging operations
        using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(30)); // 30 second timeout
        
        try 
        {
            // Show loading state immediately
            await JSRuntime.InvokeVoidAsync("leafletInterop.showLoadingIndicator", cts.Token, true);
            
            // Hide other trains when one is selected
            await JSRuntime.InvokeVoidAsync("leafletInterop.hideOtherTrains", cts.Token, trainNumber);
            
            // Use the new combined method for better performance
            var (trainDetails, trackInfo) = await TrainTrackingService.GetTrainDetailsAndTrackAsync(trainNumber);
            
            if (cts.Token.IsCancellationRequested)
            {
                Console.WriteLine("Operation cancelled due to timeout");
                return;
            }
            
            currentTrainDetails = trainDetails;
            Console.WriteLine($"Train details loaded: {currentTrainDetails?.Number}");
            
            if (trackInfo != null && trackInfo.Coordinates.Count > 0)
            {
                currentTrack = trackInfo.Coordinates;
                Console.WriteLine($"Drawing track with {trackInfo.Coordinates.Count} points and {trackInfo.Stations.Count} stations");
                
                // Prepare station data for JavaScript
                var stationsForJS = trackInfo.Stations.Select(s => new
                {
                    name = s.Name ?? "",
                    latitude = s.Latitude,
                    longitude = s.Longitude,
                    platform = s.Platform ?? "",
                    transportType = s.TransportType ?? "",
                    scheduledArrival = s.ScheduledArrival ?? "",
                    actualArrival = s.ActualArrival ?? "",
                    arrivalDelay = s.ArrivalDelay,
                    scheduledDeparture = s.ScheduledDeparture ?? "",
                    actualDeparture = s.ActualDeparture ?? "",
                    departureDelay = s.DepartureDelay,
                    additionalInfo = s.AdditionalInfo ?? new List<string>(),
                    messages = s.Messages ?? new List<string>(),
                    notices = s.Notices ?? new List<string>(),
                    warnings = s.Warnings ?? new List<string>()
                }).ToArray();
                
                // Prepare coordinates with delay information for JavaScript
                var coordinatesWithDelayForJS = trackInfo.CoordinatesWithDelay.Select(c => new
                {
                    lat = c.Latitude,
                    lng = c.Longitude,
                    delay = c.Delay
                }).ToArray();
                
                // Draw track on map with station names, stations, and delay information
                await JSRuntime.InvokeVoidAsync("leafletInterop.drawTrackWithDelay", 
                    cts.Token,
                    coordinatesWithDelayForJS,
                    new { start = trackInfo.StartStationName ?? "", end = trackInfo.EndStationName ?? "" },
                    stationsForJS);
            }
            else
            {
                Console.WriteLine("No track data received or empty track data");
            }
            
            Console.WriteLine($"Train details set to: {currentTrainDetails != null}");
            
            // Trigger UI update
            await InvokeAsync(StateHasChanged);
        }
        catch (OperationCanceledException)
        {
            Console.WriteLine("Operation was cancelled due to timeout");
        }
        catch (JSException jsEx)
        {
            Console.WriteLine($"JavaScript error: {jsEx.Message}");
        }
        catch (Exception ex) 
        {
            Console.WriteLine($"Error fetching train data: {ex.Message}");
            Console.WriteLine($"Exception details: {ex}");
        }
        finally
        {
            try
            {
                // Always hide loading indicator
                await JSRuntime.InvokeVoidAsync("leafletInterop.showLoadingIndicator", CancellationToken.None, false);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error hiding loading indicator: {ex.Message}");
            }
        }
        
        // Update train markers to highlight the selected train
        try
        {
            await UpdateTrainMarkersOnMap();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating train markers: {ex.Message}");
        }
    }

    // Update train markers to be clickable with speed-based movement
    private async Task UpdateTrainMarkersOnMap()
    {
        try
        {
            if (_objectReference == null)
            {
                Console.WriteLine("Warning: _objectReference is null, cannot wire up click events");
                return;
            }
            
            // Use the new smooth animation method with speed information
            var trainData = trainPositions.Select(train => new
            {
                number = train.Number ?? "",
                latitude = train.Latitude,
                longitude = train.Longitude,
                type = train.Type ?? "",
                hasGps = train.HasGps,
                averageSpeedKmh = train.AverageSpeedKmh,
                speedCategory = train.SpeedCategory ?? "Unknown",
                lastUpdated = train.LastUpdated.ToString("yyyy-MM-ddTHH:mm:ss.fffZ") // ISO format for JavaScript
            }).ToArray();

            var hideOthers = !string.IsNullOrEmpty(selectedTrainNumber);
            
            Console.WriteLine($"Updating {trainData.Length} train markers with speed data, hideOthers: {hideOthers}, selected: {selectedTrainNumber}");
            
            // Use timeout for JSInterop calls
            using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(10));
            
            // Call the smooth update method with speed information
            await JSRuntime.InvokeVoidAsync("leafletInterop.updateTrainPositionsSmooth", 
                cts.Token,
                trainData, selectedTrainNumber, hideOthers, _objectReference);
        }
        catch (OperationCanceledException)
        {
            Console.WriteLine("UpdateTrainMarkersOnMap operation timed out");
        }
        catch (JSException jsEx)
        {
            Console.WriteLine($"JavaScript error in UpdateTrainMarkersOnMap: {jsEx.Message}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating train markers: {ex.Message}");
        }
    }

    // Clear train details and track when no longer needed
    private async Task ClearTrainDetails()
    {
        currentTrainDetails = null;
        await ClearTrackAsync();
        
        try
        {
            // Show all trains again when details are closed
            await JSRuntime.InvokeVoidAsync("leafletInterop.showAllTrains");
        }
        catch (JSException jsEx)
        {
            Console.WriteLine($"JavaScript error in ClearTrainDetails: {jsEx.Message}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in ClearTrainDetails: {ex.Message}");
        }
        
        // Update markers to remove selection highlighting
        await UpdateTrainMarkersOnMap();
    }

    // Clear the track when no longer needed
    public async Task ClearTrackAsync()
    {
        currentTrack = null;
        selectedTrainNumber = null;
        
        try
        {
            await JSRuntime.InvokeVoidAsync("leafletInterop.clearTrack");
            
            // Clear the smooth animation markers and recreate them to ensure proper state
            await JSRuntime.InvokeVoidAsync("leafletInterop.clearMarkers");
            await UpdateTrainMarkersOnMap();
        }
        catch (JSException jsEx)
        {
            Console.WriteLine($"JavaScript error in ClearTrackAsync: {jsEx.Message}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in ClearTrackAsync: {ex.Message}");
        }
    }

    private async Task InitializeMapAsync()
    {
        const int maxRetries = 3;
        int retryCount = 0;
        
        while (retryCount < maxRetries)
        {
            try
            {
                using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(10));
                
                await JSRuntime.InvokeVoidAsync(
                    "leafletInterop.initializeMap",
                    cts.Token,
                    "mapId", 
                    Latitude, 
                    Longitude, 
                    ZoomLevel
                );
                
                Console.WriteLine("Map initialized successfully");
                return;
            }
            catch (OperationCanceledException)
            {
                Console.WriteLine($"Map initialization timed out (attempt {retryCount + 1}/{maxRetries})");
            }
            catch (JSException jsEx)
            {
                Console.WriteLine($"JavaScript error initializing map (attempt {retryCount + 1}/{maxRetries}): {jsEx.Message}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error initializing map (attempt {retryCount + 1}/{maxRetries}): {ex.Message}");
            }
            
            retryCount++;
            if (retryCount < maxRetries)
            {
                await Task.Delay(1000); // Wait 1 second before retry
            }
        }
        
        Console.WriteLine("Failed to initialize map after all retries");
    }

    public async Task AddMarkerAsync(double lat, double lng, string? title = null)
    {
        try
        {
            using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(5));
            
            await JSRuntime.InvokeVoidAsync(
                "leafletInterop.addMarker",
                cts.Token,
                lat, 
                lng, 
                title
            );
        }
        catch (OperationCanceledException)
        {
            Console.WriteLine("AddMarkerAsync operation timed out");
        }
        catch (JSException jsEx)
        {
            Console.WriteLine($"JavaScript error adding marker: {jsEx.Message}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding marker: {ex.Message}");
        }
    }

    public async Task SetViewAsync(double lat, double lng, int zoom)
    {
        try
        {
            using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(5));
            
            await JSRuntime.InvokeVoidAsync(
                "leafletInterop.setView",
                cts.Token,
                lat, 
                lng, 
                zoom
            );
        }
        catch (OperationCanceledException)
        {
            Console.WriteLine("SetViewAsync operation timed out");
        }
        catch (JSException jsEx)
        {
            Console.WriteLine($"JavaScript error setting view: {jsEx.Message}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error setting view: {ex.Message}");
        }
    }

    public async Task InvalidateSizeAsync()
    {
        try
        {
            using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(5));
            
            await JSRuntime.InvokeVoidAsync("leafletInterop.invalidateSize", cts.Token);
        }
        catch (OperationCanceledException)
        {
            Console.WriteLine("InvalidateSizeAsync operation timed out");
        }
        catch (JSException jsEx)
        {
            Console.WriteLine($"JavaScript error invalidating size: {jsEx.Message}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error invalidating size: {ex.Message}");
        }
    }

    // Toggle GPS filter
    private void ToggleGpsFilter()
    {
        try
        {
            gpsFilterEnabled = !gpsFilterEnabled;
            TrainTrackingService.GpsFilterEnabled = gpsFilterEnabled;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error toggling GPS filter: {ex.Message}");
        }
    }
    
    // Debug method to test train details display
    private async Task TestTrainDetails()
    {
        try
        {
            if (trainPositions.Any())
            {
                var firstTrain = trainPositions.First();
                Console.WriteLine($"Testing train details for: {firstTrain.Number}");
                await OnTrainMarkerClicked(firstTrain.Number);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in test train details: {ex.Message}");
        }
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        try
        {
            if (_module is not null)
            {
                await _module.DisposeAsync();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error disposing module: {ex.Message}");
        }
        
        try
        {
            _objectReference?.Dispose();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error disposing object reference: {ex.Message}");
        }
    }
}
